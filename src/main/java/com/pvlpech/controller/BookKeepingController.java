package com.pvlpech.controller;

import com.pvlpech.domain.Employee;
import com.pvlpech.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Controller
public class BookKeepingController {

    private final static String INDEX = "/index"; // get request (index page)

    private final static String EMPLOYEE = "/employee"; // get request (employee page)
    private final static String EMPLOYEES = "employees"; // employee parameter for employee page
    private final static String FIRST_NAME = "firstname"; // firstname parameter for employee page
    private final static String EMPLOYEE_ADD = "/employee/add"; // post request (add employee)

    @Autowired // This means to get the bean called employeeRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EmployeeRepository employeeRepository;

    @PostMapping(path = EMPLOYEE_ADD)
    public String addEmployee(@RequestParam String firstName
            , @RequestParam String lastName, Model model) {
        // @RequestParam means it is a parameter from the GET or POST request

        Employee employee = new Employee(firstName, lastName);
        employeeRepository.save(employee);

        Iterable<Employee> employees = employeeRepository.findAll();
        model.addAttribute(EMPLOYEES, employees);
        model.addAttribute(FIRST_NAME, ""); //TODO to implement universal filter

        return EMPLOYEE;
    }

    @GetMapping(path = EMPLOYEE)
    public String employee(@RequestParam(required = false, defaultValue = "") String firstName,  Model model) {
        Iterable<Employee> employees;

        if(firstName == null || firstName.isEmpty()) {
            employees = employeeRepository.findAll();
        } else {
            employees = employeeRepository.findByFirstName(firstName);
        }

        model.addAttribute(EMPLOYEES, employees);
        model.addAttribute(FIRST_NAME, firstName);
        return EMPLOYEE;
    }

    @GetMapping(path = "/")
    public String index() {
        return INDEX;
    }


}
